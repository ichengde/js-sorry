!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.sorry=t():e.sorry=t()}(window,(function(){return function(e){var t={};function o(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,o),n.l=!0,n.exports}return o.m=e,o.c=t,o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(r,n,function(t){return e[t]}.bind(null,n));return r},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){"use strict";function r(e,t){var o,r,n;r=!1,(o=document.createElement("script")).type="text/javascript",o.src=e,o.onload=o.onreadystatechange=function(){r||this.readyState&&"complete"!==this.readyState||(r=!0,t())},(n=document.getElementsByTagName("script")[0]).parentNode.insertBefore(o,n)}function n(e){var t=window.location.hash.match(new RegExp("(?:#|&)"+e+"=([^&]*)(&|$)"));return(t?decodeURIComponent(t[1]):"")||function(e,t){t||(t=window.location.href);e=e.replace(/[\[\]]/g,"\\$&");var o=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(t);if(!o)return null;if(!o[2])return"";return decodeURIComponent(o[2].replace(/\+/g," "))}(e)}o.r(t);var i={settings:{vconsoleUrl:"",reportUrl:null,reportPrefix:"",reportKey:"msg",otherReport:null,entry:null},store:[],logs:[],entry:function(e){var t=0,o=document.querySelector(e);o&&o.addEventListener("click",(function(){(t+=1)>5&&(t-=1e4,i.vconsole(!0))}))},config:function(e){for(var t in e)e.hasOwnProperty(t)&&(i.settings[t]=e[t]);e.entry&&window.addEventListener("load",(function(){i.entry(e.entry)}));var o=n("vconsole");o&&("show"===o?i.vconsole(!0):i.vconsole(!1))},vconsole:function(e){r(i.settings.vconsoleUrl,(function(){void 0===window.vConsole&&(window.vConsole=new window.VConsole({defaultPlugins:["system","network","element","storage"],maxLogNumber:5e3}))}));for(var t=0,o=i.store.length;t<o;t++){var n=i.store[t];n.noOrigin=!0,window.vConsole.pluginList.default.printLog(n)}if(e){try{window.vConsole.show()}catch(e){}window.addEventListener("load",(function(){window.vConsole.show()}))}},getCookie:function(e){var t,o=new RegExp("(^| )"+e+"=([^;]*)(;|$)");return(t=document.cookie.match(o))?unescape(t[2]):null},getParameter:n,loadScript:r};["log","info","warn","debug","error"].forEach((function(e){var t=console[e];console[e]=function(){i.store.push({logType:e,logs:arguments}),t.apply(console,arguments)}})),window.onerror=function(e,t,o,r,n){var c,l,a=e;n&&n.stack&&(a=function(e){var t=e.stack.replace(/\n/gi,"").split(/\bat\b/).slice(0,9).join("@").replace(/\?[^:]+/gi,""),o=e.toString();return t.indexOf(o)<0&&(t=o+"@"+t),t}(n)),c=a,l="Event",Object.prototype.toString.call(c)==="[object "+(l||"Object")+"]"&&(a+=a.type?"--"+a.type+"--"+(a.target?a.target.tagName+"::"+a.target.src:""):""),a=(a+""||"").substr(0,500),i.logs.push({msg:a,target:t,rowNum:o,colNum:r}),e.toLowerCase().indexOf("script error")>-1?console.error("Script Error: See Brower Console For Detail"):console.error(a);var s=i.settings;if(s.reportUrl){var u=s.reportUrl+(s.reportUrl.indexOf("?")>-1?"&":"?")+s.reportKey+"="+(s.reportPrefix?"["+s.reportPrefix+"]":"")+a+"&t="+(new Date).getTime();if(s.otherReport)for(var f in s.otherReport)s.otherReport.hasOwnProperty(f)&&(u+="&"+f+"="+s.otherReport[f]);(new Image).src=u}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,