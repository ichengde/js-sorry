!function(e,o){"object"==typeof exports&&"object"==typeof module?module.exports=o():"function"==typeof define&&define.amd?define([],o):"object"==typeof exports?exports.sorry=o():e.sorry=o()}(window,(function(){return function(e){var o={};function n(t){if(o[t])return o[t].exports;var r=o[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=o,n.d=function(e,o,t){n.o(e,o)||Object.defineProperty(e,o,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,o){if(1&o&&(e=n(e)),8&o)return e;if(4&o&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&o&&"string"!=typeof e)for(var r in e)n.d(t,r,function(o){return e[o]}.bind(null,r));return t},n.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(o,"a",o),o},n.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},n.p="",n(n.s=0)}([function(e,o,n){"use strict";function t(e,o){var n,t,r;t=!1,(n=document.createElement("script")).type="text/javascript",n.src=e,n.onload=n.onreadystatechange=function(){t||this.readyState&&"complete"!==this.readyState||(t=!0,o())},(r=document.getElementsByTagName("script")[0]).parentNode.insertBefore(n,r)}function r(e){var o=window.location.hash.match(new RegExp("(?:#|&)"+e+"=([^&]*)(&|$)"));return(o?decodeURIComponent(o[1]):"")||function(e,o){o||(o=window.location.href);e=e.replace(/[\[\]]/g,"\\$&");var n=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(o);if(!n)return null;if(!n[2])return"";return decodeURIComponent(n[2].replace(/\+/g," "))}(e)}n.r(o),n.d(o,"sorry",(function(){return i}));var i={settings:{vconsoleUrl:"",reportUrl:null,project:"",id:"",reportKey:"msg",otherReport:null,entry:null},store:[],logs:[],entry:function(e){var o=0,n=document.querySelector(e);n&&n.addEventListener("click",(function(){(o+=1)>5&&(o-=1e4,i.vconsole(!0))}))},config:function(e){for(var o in e)e.hasOwnProperty(o)&&(i.settings[o]=e[o]);e.entry&&window.addEventListener("load",(function(){i.entry(e.entry)}));var n=r("vconsole");n&&("show"===n?i.vconsole(!0):i.vconsole(!1))},vconsole:function(e){t(i.settings.vconsoleUrl,(function(){void 0===window.vConsole&&(window.vConsole=new window.VConsole({defaultPlugins:["system","network","element","storage"],maxLogNumber:5e3}))}));for(var o=0,n=i.store.length;o<n;o++){var r=i.store[o];r.noOrigin=!0,window.vConsole.pluginList.default.printLog(r)}if(e){try{window.vConsole.show()}catch(e){}window.addEventListener("load",(function(){window.vConsole.show()}))}},getCookie:function(e){var o,n=new RegExp("(^| )"+e+"=([^;]*)(;|$)");return(o=document.cookie.match(n))?unescape(o[2]):null},getParameter:r,loadScript:t};["log","info","warn","debug"].forEach((function(e){var o=console[e];console[e]=function(){i.store.push({logType:e,logs:arguments}),o.apply(console,arguments)}})),window.addEventListener("error",(function(e){var o=e.message,n=e.filename,t=e.lineno,r=e.colno,c=e.error,s=o;c&&c.stack&&(s=function(e){var o=e.stack.split(/\n/).map((function(e){return e.replace(/\s{4}/g,"")})).slice(0,9),n=e.toString();return o.indexOf(n)<0&&(o=n+"@"+o),o}(c)),i.logs.push({msg:s,target:n,rowNum:t,colNum:r}),o.toLowerCase().indexOf("script error")>-1?console.error("Script Error: See Brower Console For Detail"):console.error(o);var l=i.settings;if(l.reportUrl){l.reportUrl;fetch(l.reportUrl,{method:"POST",body:JSON.stringify({userAgent:navigator.userAgent,location:location.href,project:i.settings.project,id:i.settings.id,store:i.store,logs:i.logs})}).then((function(e){return e.json()})).catch((function(e){}))}}))}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,